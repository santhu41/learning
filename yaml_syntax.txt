YAML Syntax
This page provides a basic overview of correct YAML syntax, which is how Ansible playbooks (our configuration management language) are expressed.
We use YAML because it is easier for humans to read and write than other common data formats like XML or JSON. Further, there are libraries available in most programming languages for working with YAML.
You may also wish to read Working with playbooks at the same time to see how this is used in practice.
Refer below links for more information : 
https://www.golinuxcloud.com/jinja2-template/

https://www.digitalocean.com/community/tutorials/configuration-management-101-writing-ansible-playbooks

YAML Basics
For Ansible, nearly every YAML file starts with a list. Each item in the list is a list of key/value pairs, commonly called a "hash" or a "dictionary". So, we need to know how to write lists and dictionaries in YAML.
There's another small quirk to YAML. All YAML files (regardless of their association with Ansible or not) can optionally begin with --- and end with .... This is part of the YAML format and indicates the start and end of a document.
All members of a list are lines beginning at the same indentation level starting with a "- " (a dash and a space):
---
# A list of tasty fruits
- Apple
- Orange
- Strawberry
- Mango
...

A dictionary is represented in a simple key: value form (the colon must be followed by a space):
# An employee record
martin:
  name: Martin D'vloper
  job: Developer
  skill: Elite

More complicated data structures are possible, such as lists of dictionaries, dictionaries whose values are lists or a mix of both:
# Employee records
- martin:
    name: Martin D'vloper
    job: Developer
    skills:
      - python
      - perl
      - pascal
- tabitha:
    name: Tabitha Bitumen
    job: Developer
    skills:
      - lisp
      - fortran
      - erlang

Dictionaries and lists can also be represented in an abbreviated form if you really want to:
---
martin: {name: Martin D'vloper, job: Developer, skill: Elite}
fruits: ['Apple', 'Orange', 'Strawberry', 'Mango']

These are called "Flow collections".
Ansible doesn't really use these too much, but you can also specify a boolean value (true/false) in several forms:
create_key: true
needs_agent: false
knows_oop: True
likes_emacs: TRUE
uses_cvs: false

Use lowercase 'true' or 'false' for boolean values in dictionaries if you want to be compatible with default yamllint options.
Values can span multiple lines using | or >. Spanning multiple lines using a "Literal Block Scalar" | will include the newlines and any trailing spaces. Using a "Folded Block Scalar" > will fold newlines to spaces; it's used to make what would otherwise be a very long line easier to read and edit. In either case the indentation will be ignored. Examples are:
include_newlines: |
            exactly as you see
            will appear these three
            lines of poetry

fold_newlines: >
            this is really a
            single line of text
            despite appearances

While in the above > example all newlines are folded into spaces, there are two ways to enforce a newline to be kept:
fold_some_newlines: >
    a
    b

    c
    d
      e
    f

Alternatively, it can be enforced by including newline \n characters:
fold_same_newlines: "a b\nc d\n  e\nf\n"

Let's combine what we learned so far in an arbitrary YAML example. This really has nothing to do with Ansible, but will give you a feel for the format:
---
# An employee record
name: Martin D'vloper
job: Developer
skill: Elite
employed: True
foods:
  - Apple
  - Orange
  - Strawberry
  - Mango
languages:
  perl: Elite
  python: Elite
  pascal: Lame
education: |
  4 GCSEs
  3 A-Levels
  BSc in the Internet of Things

That's all you really need to know about YAML to start writing Ansible playbooks.
Gotchas
While you can put just about anything into an unquoted scalar, there are some exceptions. A colon followed by a space (or newline) ": " is an indicator for a mapping. A space followed by the pound sign " #" starts a comment.
Because of this, the following is going to result in a YAML syntax error:
foo: somebody said I should put a colon here: so I did

windows_drive: c:

...but this will work:
windows_path: c:\windows

You will want to quote hash values using colons followed by a space or the end of the line:
foo: 'somebody said I should put a colon here: so I did'

windows_drive: 'c:'

...and then the colon will be preserved.
Alternatively, you can use double quotes:
foo: "somebody said I should put a colon here: so I did"

windows_drive: "c:"

The difference between single quotes and double quotes is that in double quotes you can use escapes:
foo: "a \t TAB and a \n NEWLINE"

The list of allowed escapes can be found in the YAML Specification under "Escape Sequences" (YAML 1.1) or "Escape Characters" (YAML 1.2).
The following is invalid YAML:
foo: "an escaped \' single quote"

Further, Ansible uses "{{ var }}" for variables. If a value after a colon starts with a "{", YAML will think it is a dictionary, so you must quote it, like so:
foo: "{{ variable }}"

If your value starts with a quote the entire value must be quoted, not just part of it. Here are some additional examples of how to properly quote things:
foo: "{{ variable }}/additional/string/literal"
foo2: "{{ variable }}\\backslashes\\are\\also\\special\\characters"
foo3: "even if it's just a string literal it must all be quoted"

Not valid:
foo: "E:\\path\\"rest\\of\\path

In addition to ' and " there are a number of characters that are special (or reserved) and cannot be used as the first character of an unquoted scalar: [] {} > | * & ! % # ` @ ,.
You should also be aware of ? : -. In YAML, they are allowed at the beginning of a string if a non-space character follows, but YAML processor implementations differ, so it's better to use quotes.
In Flow Collections, the rules are a bit more strict:
a scalar in block mapping: this } is [ all , valid

flow mapping: { key: "you { should [ use , quotes here" }

Boolean conversion is helpful, but this can be a problem when you want a literal yes or other boolean values as a string. In these cases just use quotes:
non_boolean: "yes"
other_string: "False"

YAML converts certain strings into floating-point values, such as the string 1.0. If you need to specify a version number (in a requirements.yml file, for example), you will need to quote the value if it looks like a floating-point value:
version: "1.0"

See also
Working with playbooks
Learn what playbooks can do and how to write/run them.
YAMLLint
YAML Lint (online) helps you debug YAML syntax if you are having problems
GitHub examples directory
Complete playbook files from the github project source
Wikipedia YAML syntax reference
A good guide to YAML syntax
Mailing List
Questions? Help? Ideas? Stop by the list on Google Groups
Real-time chat
How to join Ansible chat channels (join #yaml for yaml-specific questions)
YAML 1.1 Specification
The Specification for YAML 1.1, which PyYAML and libyaml are currently implementing
YAML 1.2 Specification
For completeness, YAML 1.2 is the successor of 1.1
################ Yaml Script to  write  to install and configure #####################
---
  - name: Updating SSHD_Config File
    hosts: all

    tasks:
      - name: "Installing Apache2"
        become: yes
        become_user: root
        apt : name=apache2 state=latest
      - name: "Updating Add the line if it does not exist"
        become: yes
        become_user: root
        lineinfile:
          path: /etc/ssh/sshd_config
          state: present
          line: "{{ item }}"
        with_items:
         - 'Subsystem sftp internal-sftp'
         - 'Match group www-data'
         - 'ChrootDirectory /var/www/vhosts/staging/th'
         - 'ForceCommand internal-sftp'
         - 'AllowTcpForwarding no'
         - 'X11Forwarding no'
      - name: "Search the string value replacing the string values"
        become: yes
        become_user: root
        tags: example1
        lineinfile:
          path: /etc/ssh/sshd_config
          # The String to Search
          regexp: "Subsystem      sftp    /usr/lib/openssh/sftp-server"
          # The String to Replace
          line: "#Subsystem      sftp    /usr/lib/openssh/sftp-server"
          state: present
          backup: yes
        register: example1out
      - name: "Example1: Validate if a String or line is present in the file"
        become: yes
        become_user: root
        shell:
          cmd: systemctl restart sshd

############################################################################

Yaml script dependencies which installing or deleting packages sample key words


ansible-apt Invoked with name=mysql-server
state=latest
package=['mysql-server']
update_cache_retries=5 
update_cache_retry_max_delay=12
cache_valid_time=0 
purge=False
force=False
upgrade=no
dpkg_options=force-confdef,force-confold
autoremove=False
autoclean=False 
fail_on_autoremove=False
only_upgrade=False
 force_apt_get=False 
allow_unauthenticated=False
allow_downgrade=False 
lock_timeout=60
update_cache=None 
deb=None
default_release=None
 install_recommends=None
 policy_rc_d=None

Keywords while updating any files

state=present
line=Subsystem sftp internal-sftp
backrefs=False
create=False 
backup=False 
firstmatch=False 
unsafe_writes=False 
regexp=None 
search_string=None
insertafter=None
insertbefore=None 
validate=None 
mode=None
owner=None 
group=None 
seuser=None 
serole=None 
selevel=None 
setype=None 
attributes=None












with _raw_params=systemctl restart 
sshd _uses_shell=True 
warn=False 
stdin_add_newline=True 
strip_empty_ends=True 
argv=None 
chdir=None 
executable=None 
creates=None 
removes=None 
stdin=None

While copying files src to destinations 


src=/home/ansibleuser/.ansible/tmp/ansible-tmp-1683806301.5466435-7527-109961419090545/source dest=/home/ansibleuser/ _original_basename=test.txt 
follow=False 
checksum=03b239115050033c97c98a595ef49b47f4ae43fe 
backup=False
force=True 
unsafe_writes=False 
content=NOT_LOGGING_PARAMETER 
validate=None 
directory_mode=None 
remote_src=None 
local_follow=None 
mode=None 
owner=None 
group=None
seuser=None
serole=None
selevel=None 
setype=None 
attributes=None
